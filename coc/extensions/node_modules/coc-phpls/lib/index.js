"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const LanguageID = 'php';
const VERSION = '1.0.13';
const INDEXING_STARTED_NOTIFICATION = new vscode_languageserver_protocol_1.NotificationType('indexingStarted');
const INDEXING_ENDED_NOTIFICATION = new vscode_languageserver_protocol_1.NotificationType('indexingEnded');
const INDEX_WORKSPACE_REQUEST = new vscode_languageserver_protocol_1.RequestType('indexWorkspace');
const CANCEL_INDEXING_REQUEST = new vscode_languageserver_protocol_1.RequestType('cancelIndexing');
let languageClient;
function activate(context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let c = coc_nvim_1.workspace.getConfiguration();
        const config = c.get("phpls");
        const enable = config.enable;
        const file = require.resolve("intelephense");
        if (enable === false)
            return;
        if (!file) {
            coc_nvim_1.workspace.showMessage("intelephense-server not found!, please run yarn global add intelephense-server", "error");
            return;
        }
        // The debug options for the server
        let debugOptions = {
            execArgv: ["--nolazy", "--inspect=6039", "--trace-warnings", "--preserve-symlinks"],
            detached: true
        };
        let serverOptions = {
            run: { module: file, transport: coc_nvim_1.TransportKind.ipc },
            debug: { module: file, transport: coc_nvim_1.TransportKind.ipc, options: debugOptions }
        };
        // todo: implements createMiddleware method
        // let middleware = createMiddleware(() => {
        // 	return languageClient;
        // });
        let clientOptions = {
            documentSelector: [
                { language: LanguageID, scheme: 'file' },
                { language: LanguageID, scheme: 'untitled' }
            ],
            synchronize: {
                // Notify the server about file changes to php in the workspace
                fileEvents: coc_nvim_1.workspace.createFileSystemWatcher(workspaceFilesIncludeGlob()),
            },
            initializationOptions: {
                storagePath: context.storagePath,
                clearCache: false
            },
            middleware: {
                provideCompletionItem: (document, position, context, token, next) => {
                    return Promise.resolve(next(document, position, context, token)).then((res) => {
                        let doc = coc_nvim_1.workspace.getDocument(document.uri);
                        if (!doc)
                            return [];
                        if (res.hasOwnProperty('isIncomplete')) {
                            let itemList = res;
                            if (Array.isArray(itemList.items)) {
                                itemList.items.forEach(fixItem);
                            }
                            return itemList;
                        }
                        let items = res;
                        if (Array.isArray(items)) {
                            items.forEach(fixItem);
                        }
                        return items;
                    });
                }
            }
        };
        languageClient = new coc_nvim_1.LanguageClient("phpls", "PHP Language Server", serverOptions, clientOptions);
        let ready = languageClient.onReady();
        ready.then(() => {
            languageClient.info('Intelephense ' + VERSION);
            let startedTime;
            languageClient.onNotification(INDEXING_STARTED_NOTIFICATION.method, () => {
                startedTime = new Date();
                coc_nvim_1.workspace.showMessage('intelephense indexing ...');
            });
            languageClient.onNotification(INDEXING_ENDED_NOTIFICATION.method, () => {
                let usedTime = Math.abs(new Date().getTime() - startedTime.getTime());
                coc_nvim_1.workspace.showMessage("Indexed php files, times: " + usedTime + "ms");
            });
        });
        let indexWorkspaceDisposable = coc_nvim_1.commands.registerCommand('intelephense.index.workspace', () => languageClient.sendRequest(INDEX_WORKSPACE_REQUEST.method));
        let cancelIndexingDisposable = coc_nvim_1.commands.registerCommand('intelephense.cancel.indexing', () => languageClient.sendRequest(CANCEL_INDEXING_REQUEST.method));
        context.subscriptions.push(coc_nvim_1.services.registLanguageClient(languageClient), indexWorkspaceDisposable, cancelIndexingDisposable);
    });
}
exports.activate = activate;
function fixItem(item) {
    if (/^\\\w+/.test(item.insertText) && !/^(\\\w+){2,}/.test(item.insertText)) {
        item.insertText = item.insertText.replace('\\', '');
    }
}
function workspaceFilesIncludeGlob() {
    // todo: need include glob files
    return `{}`;
}
//# sourceMappingURL=index.js.map