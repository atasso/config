"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fast_diff_1 = tslib_1.__importDefault(require("fast-diff"));
const vscode_uri_1 = tslib_1.__importDefault(require("vscode-uri"));
const resolve_from_1 = tslib_1.__importDefault(require("resolve-from"));
function getAllFixEdits(textDocument, settings) {
    let u = vscode_uri_1.default.parse(textDocument.uri);
    if (u.scheme != 'file')
        return [];
    let content = textDocument.getText();
    let newOptions = Object.assign({}, settings.options, {
        fix: true
    });
    let filename = vscode_uri_1.default.parse(textDocument.uri).fsPath;
    let engine = new settings.library.CLIEngine(newOptions);
    let res = engine.executeOnText(content, filename);
    if (!res.results.length)
        return [];
    let { output } = res.results[0];
    if (output == null)
        return [];
    let change = getChange(content, output);
    return [{
            range: {
                start: textDocument.positionAt(change.start),
                end: textDocument.positionAt(change.end)
            },
            newText: change.newText
        }];
}
exports.getAllFixEdits = getAllFixEdits;
function getChange(oldStr, newStr) {
    let result = fast_diff_1.default(oldStr, newStr, 1);
    let curr = 0;
    let start = -1;
    let end = -1;
    let newText = '';
    let remain = '';
    for (let item of result) {
        let [t, str] = item;
        // equal
        if (t == 0) {
            curr = curr + str.length;
            if (start != -1)
                remain = remain + str;
        }
        else {
            if (start == -1)
                start = curr;
            if (t == 1) {
                newText = newText + remain + str;
                end = curr;
            }
            else {
                newText = newText + remain;
                end = curr + str.length;
            }
            remain = '';
            if (t == -1)
                curr = curr + str.length;
        }
    }
    return { start, end, newText };
}
exports.getChange = getChange;
function resolveModule(name, localPath, globalPath) {
    if (localPath) {
        let path = resolve_from_1.default.silent(localPath, name);
        if (path)
            return Promise.resolve(path);
    }
    try {
        let path = resolve_from_1.default(globalPath, name);
        return Promise.resolve(path);
    }
    catch (e) {
        return Promise.reject(e);
    }
}
exports.resolveModule = resolveModule;
//# sourceMappingURL=util.js.map